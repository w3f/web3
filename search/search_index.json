{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Web3 Technology Stack Disclaimer: This open source resource is a work in progress and is not an exhaustive list of all the projects in the Web3 Tech Stack. This resource should not be interpreted as a promotion or validation of any of the projects herein. About Web 3 is the vision of the serverless internet, the decentralised web. An internet where users are in control of their own data, identity, and destiny. The [[Web3 Foundation|Web3-Mission-and-Background]] nurtures and stewards technologies and applications in the fields of decentralized web software protocols, particularly those which utilize modern cryptographic methods to safeguard decentralization, to the benefit and for the stability of the Web 3 ecosystem. Web 3 Tech Stack The Components of the Tech Stack Layer 0 P2P internet overlay protocols e.g. Devp2p, Libp2p Platform-neutral computation description language e.g. EVM, WASM, UTXO Layer 1 Data distribution protocols e.g. IPFS, Bluzelle, Fluence, Swarm Low-trust interaction platforms e.g. Polkadot Low-trust interaction protocols e.g. Ethereum, Bitcoin, Zcash, Polkadot parachains Transient data messaging e.g. Whisper, Matrix Layer 2 Second layer protocols e.g. (various) Layer 3 Protocol-extensible developer APIs languages e.g. Web3.js, ether.js, oo7.js, Solidity, Rust Layer 4 Protocol-extensible user-interface crade e.g. Status, Metamask, MyCrypto, Parity","title":"Home"},{"location":"#welcome-to-the-web3-technology-stack","text":"Disclaimer: This open source resource is a work in progress and is not an exhaustive list of all the projects in the Web3 Tech Stack. This resource should not be interpreted as a promotion or validation of any of the projects herein.","title":"Welcome to the Web3 Technology Stack"},{"location":"#about","text":"Web 3 is the vision of the serverless internet, the decentralised web. An internet where users are in control of their own data, identity, and destiny. The [[Web3 Foundation|Web3-Mission-and-Background]] nurtures and stewards technologies and applications in the fields of decentralized web software protocols, particularly those which utilize modern cryptographic methods to safeguard decentralization, to the benefit and for the stability of the Web 3 ecosystem.","title":"About"},{"location":"#web-3-tech-stack","text":"","title":"Web 3 Tech Stack"},{"location":"#the-components-of-the-tech-stack","text":"Layer 0 P2P internet overlay protocols e.g. Devp2p, Libp2p Platform-neutral computation description language e.g. EVM, WASM, UTXO Layer 1 Data distribution protocols e.g. IPFS, Bluzelle, Fluence, Swarm Low-trust interaction platforms e.g. Polkadot Low-trust interaction protocols e.g. Ethereum, Bitcoin, Zcash, Polkadot parachains Transient data messaging e.g. Whisper, Matrix Layer 2 Second layer protocols e.g. (various) Layer 3 Protocol-extensible developer APIs languages e.g. Web3.js, ether.js, oo7.js, Solidity, Rust Layer 4 Protocol-extensible user-interface crade e.g. Status, Metamask, MyCrypto, Parity","title":"The Components of the Tech Stack"},{"location":"layer_0/","text":"Overview Layer 0 is the lowest layer. It is the foundation upon which the higher layers are built. For example, the first component of Layer 0 provides the necessary networking capabilities necessary for building peer-to-peer networks. Layer 0 is made up of two components that can be reused amongst Layer 1 technologies. These are the standardised basic building blocks out of which some layer 1 technologies can be assembled. Components (1) [[Peer-to-peer (p2p) internet overlay protocols|peer to peer internet overlay protocols]] Devp2p Libp2p (2) [[Platform-neutral computation description language|platform neutral computation description language]] EVM WASM * UTXO","title":"Layer 0"},{"location":"layer_0/#overview","text":"Layer 0 is the lowest layer. It is the foundation upon which the higher layers are built. For example, the first component of Layer 0 provides the necessary networking capabilities necessary for building peer-to-peer networks. Layer 0 is made up of two components that can be reused amongst Layer 1 technologies. These are the standardised basic building blocks out of which some layer 1 technologies can be assembled.","title":"Overview"},{"location":"layer_0/#components","text":"(1) [[Peer-to-peer (p2p) internet overlay protocols|peer to peer internet overlay protocols]] Devp2p Libp2p (2) [[Platform-neutral computation description language|platform neutral computation description language]] EVM WASM * UTXO","title":"Components"},{"location":"layer_0/overlay_protocols/","text":"Overview Peer-to-peer Internet overlay protocols are a Layer 0 component. Examples are: Devp2p Libp2p Devp2p Overview devp2p is the secure networking suite that powers Ethereum, Whisper, and Swarm. It defines a set of networking and peer-to-peer protocols including RLPx , which it uses for authentication, stream multiplexing, network forming, and protocol multiplexing. Resources Wiki - protocol specification. JS Implementation - library bundling different components. RLPx - peer-to-peer network and protocol suite. Gitt Chat - discuss the project. Libp2p Overview libp2p is the modular secure networking suite that powers IPFS and Polkadot. It defines a set of interfaces for common networking and peer-to-peer protocols. libp2p is fast, robust, and powerful. It uses multiformats for self-description, avoiding algorithm lock-in, and cryptographic agility. libp2p handles Authentication, Transports, Stream Multiplexing, Peer Discovery, Peer Routing, Content Routing, NAT Traversal, and Relay. The coolest thing? It also runs entirely on the browser! Resources GitHub Repo - full set of resources. Specifications - spec in libp2p, currently a work in progress. Rust Implementation - implementation in Rust from Parity Technologies . Website - homepage. Whitepaper - high-level overview, now outdated. Teams using libp2p Polkadot Substrate IPFS Livepeer OpenBazaar Curio","title":"Overlay protocols"},{"location":"layer_0/overlay_protocols/#overview","text":"Peer-to-peer Internet overlay protocols are a Layer 0 component. Examples are: Devp2p Libp2p","title":"Overview"},{"location":"layer_0/overlay_protocols/#devp2p","text":"","title":"Devp2p"},{"location":"layer_0/overlay_protocols/#overview_1","text":"devp2p is the secure networking suite that powers Ethereum, Whisper, and Swarm. It defines a set of networking and peer-to-peer protocols including RLPx , which it uses for authentication, stream multiplexing, network forming, and protocol multiplexing.","title":"Overview"},{"location":"layer_0/overlay_protocols/#resources","text":"Wiki - protocol specification. JS Implementation - library bundling different components. RLPx - peer-to-peer network and protocol suite. Gitt Chat - discuss the project.","title":"Resources"},{"location":"layer_0/overlay_protocols/#libp2p","text":"","title":"Libp2p"},{"location":"layer_0/overlay_protocols/#overview_2","text":"libp2p is the modular secure networking suite that powers IPFS and Polkadot. It defines a set of interfaces for common networking and peer-to-peer protocols. libp2p is fast, robust, and powerful. It uses multiformats for self-description, avoiding algorithm lock-in, and cryptographic agility. libp2p handles Authentication, Transports, Stream Multiplexing, Peer Discovery, Peer Routing, Content Routing, NAT Traversal, and Relay. The coolest thing? It also runs entirely on the browser!","title":"Overview"},{"location":"layer_0/overlay_protocols/#resources_1","text":"GitHub Repo - full set of resources. Specifications - spec in libp2p, currently a work in progress. Rust Implementation - implementation in Rust from Parity Technologies . Website - homepage. Whitepaper - high-level overview, now outdated.","title":"Resources"},{"location":"layer_0/overlay_protocols/#teams-using-libp2p","text":"Polkadot Substrate IPFS Livepeer OpenBazaar Curio","title":"Teams using libp2p"},{"location":"layer_0/platform_neutral_computation/","text":"Overview Platform neutral computation description language is a Layer 0 component. Example EVM WASM * UTXO EVM Overview Ethereum Virtual Machine (EVM) is the virtual machine executed on the Ethereum network. Resources EVM GitHub (Awesome list) WASM Overview WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications. Resources Wasm Website Wasm Documentation UTXO Overview An unspent transaction output (UTXO) is an output of a blockchain transaction that has not been spent, i.e. used as an input in a new transaction. Bitcoin is the most famous example of a cryptocurrency that uses the UTXO model. This section pertains the UTXO-based state machine of blockchains that Bitcoin-like. Resources UTXO Explanation - Bitcoin.org UTXO Explanation - A. Antonopoulos","title":"Platform neutral computation"},{"location":"layer_0/platform_neutral_computation/#overview","text":"Platform neutral computation description language is a Layer 0 component. Example EVM WASM * UTXO","title":"Overview"},{"location":"layer_0/platform_neutral_computation/#evm","text":"","title":"EVM"},{"location":"layer_0/platform_neutral_computation/#overview_1","text":"Ethereum Virtual Machine (EVM) is the virtual machine executed on the Ethereum network.","title":"Overview"},{"location":"layer_0/platform_neutral_computation/#resources","text":"EVM GitHub (Awesome list)","title":"Resources"},{"location":"layer_0/platform_neutral_computation/#wasm","text":"","title":"WASM"},{"location":"layer_0/platform_neutral_computation/#overview_2","text":"WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications.","title":"Overview"},{"location":"layer_0/platform_neutral_computation/#resources_1","text":"Wasm Website Wasm Documentation","title":"Resources"},{"location":"layer_0/platform_neutral_computation/#utxo","text":"","title":"UTXO"},{"location":"layer_0/platform_neutral_computation/#overview_3","text":"An unspent transaction output (UTXO) is an output of a blockchain transaction that has not been spent, i.e. used as an input in a new transaction. Bitcoin is the most famous example of a cryptocurrency that uses the UTXO model. This section pertains the UTXO-based state machine of blockchains that Bitcoin-like.","title":"Overview"},{"location":"layer_0/platform_neutral_computation/#resources_2","text":"UTXO Explanation - Bitcoin.org UTXO Explanation - A. Antonopoulos","title":"Resources"},{"location":"layer_1/","text":"Overview Layer 1 technology provides the functionality of distribution and interaction. This layer is made up of four components. Components (3) [[Data distribution protocols|data distribution protocols]] IPFS Bluzelle Fluence Swarm (4) [[Zero/low-trust interaction platforms (shared security)|low trust interaction platforms]] * [[Polkadot|Polkadot]] (5) [[Zero/low-trust interaction protocols|low trust interaction protocols]] Bitcoin [[Ethereum|Ethereum]] Zcash Edgeware * Polkadot Parachains (6) [[Transient data pub/sub messaging|transient data messaging]] Whisper Matrix","title":"Layer 1"},{"location":"layer_1/#overview","text":"Layer 1 technology provides the functionality of distribution and interaction. This layer is made up of four components.","title":"Overview"},{"location":"layer_1/#components","text":"(3) [[Data distribution protocols|data distribution protocols]] IPFS Bluzelle Fluence Swarm (4) [[Zero/low-trust interaction platforms (shared security)|low trust interaction platforms]] * [[Polkadot|Polkadot]] (5) [[Zero/low-trust interaction protocols|low trust interaction protocols]] Bitcoin [[Ethereum|Ethereum]] Zcash Edgeware * Polkadot Parachains (6) [[Transient data pub/sub messaging|transient data messaging]] Whisper Matrix","title":"Components"},{"location":"layer_1/data_distribution/","text":"Overview Data distribution protocols is a Layer 1 component. Examples: IPFS BigchainDB Bluzelle Fluence * Swarm IPFS Overview A peer-to-peer hypermedia protocol to make the web faster, safer, and more open. IPFS is a global, versioned, peer-to-peer filesystem. It combines good ideas from Git, BitTorrent, Kademlia, SFS, and the Web. It is like a single BitTorrent swarm, exchanging git objects. IPFS provides an interface as simple as the HTTP web, but with permanence built in. Resources IPFS Website IPFS Documentation IPFS GitHub BigchainDB Overview BigchainDB allows developers and enterprise to deploy blockchain proof-of-concepts, platforms and applications with a blockchain database, supporting a wide range of industries and use cases. Resources BigchainDB Website BigchainDB Whitepaper BigchainDB Documentation Bluzelle Overview Bluzelle decentralizes application data by storing shards on a network of nodes, grouped into swarms. Resources Bluzelle Website Bluzelle GitHub Fluence Overview Fluence is a network of independent nodes that provide a decentralized, end-to-end encrypted database service. Scalable, reliable and secured by blockchain. Resources Fluence Website Fluence GitHub Swarm Overview Swarm is a distributed storage platform and content distribution service, a native base layer service of the Ethereum web3 stack. The primary objective of Swarm is to provide a sufficiently decentralised and redundant store of Ethereum\u2019s public record, and in particular, to store and distribute DApp code and data as well as blockchain data. Resources Swarm Documentation Swarm GitHub","title":"Data distribution"},{"location":"layer_1/data_distribution/#overview","text":"Data distribution protocols is a Layer 1 component. Examples: IPFS BigchainDB Bluzelle Fluence * Swarm","title":"Overview"},{"location":"layer_1/data_distribution/#ipfs","text":"","title":"IPFS"},{"location":"layer_1/data_distribution/#overview_1","text":"A peer-to-peer hypermedia protocol to make the web faster, safer, and more open. IPFS is a global, versioned, peer-to-peer filesystem. It combines good ideas from Git, BitTorrent, Kademlia, SFS, and the Web. It is like a single BitTorrent swarm, exchanging git objects. IPFS provides an interface as simple as the HTTP web, but with permanence built in.","title":"Overview"},{"location":"layer_1/data_distribution/#resources","text":"IPFS Website IPFS Documentation IPFS GitHub","title":"Resources"},{"location":"layer_1/data_distribution/#bigchaindb","text":"","title":"BigchainDB"},{"location":"layer_1/data_distribution/#overview_2","text":"BigchainDB allows developers and enterprise to deploy blockchain proof-of-concepts, platforms and applications with a blockchain database, supporting a wide range of industries and use cases.","title":"Overview"},{"location":"layer_1/data_distribution/#resources_1","text":"BigchainDB Website BigchainDB Whitepaper BigchainDB Documentation","title":"Resources"},{"location":"layer_1/data_distribution/#bluzelle","text":"","title":"Bluzelle"},{"location":"layer_1/data_distribution/#overview_3","text":"Bluzelle decentralizes application data by storing shards on a network of nodes, grouped into swarms.","title":"Overview"},{"location":"layer_1/data_distribution/#resources_2","text":"Bluzelle Website Bluzelle GitHub","title":"Resources"},{"location":"layer_1/data_distribution/#fluence","text":"","title":"Fluence"},{"location":"layer_1/data_distribution/#overview_4","text":"Fluence is a network of independent nodes that provide a decentralized, end-to-end encrypted database service. Scalable, reliable and secured by blockchain.","title":"Overview"},{"location":"layer_1/data_distribution/#resources_3","text":"Fluence Website Fluence GitHub","title":"Resources"},{"location":"layer_1/data_distribution/#swarm","text":"","title":"Swarm"},{"location":"layer_1/data_distribution/#overview_5","text":"Swarm is a distributed storage platform and content distribution service, a native base layer service of the Ethereum web3 stack. The primary objective of Swarm is to provide a sufficiently decentralised and redundant store of Ethereum\u2019s public record, and in particular, to store and distribute DApp code and data as well as blockchain data.","title":"Overview"},{"location":"layer_1/data_distribution/#resources_4","text":"Swarm Documentation Swarm GitHub","title":"Resources"},{"location":"layer_1/messaging/","text":"Overview Transient data messaging is a Layer 1 component. Examples are: Whisper Matrix Whisper Overview Whisper is a communication protocol for DApps to communicate with each other. Resources Whisper GitHub Matrix Overview Matrix is an ambitious new ecosystem for open federated Instant Messaging and VoIP. Resources Matrix Website Matrix GitHub","title":"Messaging"},{"location":"layer_1/messaging/#overview","text":"Transient data messaging is a Layer 1 component. Examples are: Whisper Matrix","title":"Overview"},{"location":"layer_1/messaging/#whisper","text":"","title":"Whisper"},{"location":"layer_1/messaging/#overview_1","text":"Whisper is a communication protocol for DApps to communicate with each other.","title":"Overview"},{"location":"layer_1/messaging/#resources","text":"Whisper GitHub","title":"Resources"},{"location":"layer_1/messaging/#matrix","text":"","title":"Matrix"},{"location":"layer_1/messaging/#overview_2","text":"Matrix is an ambitious new ecosystem for open federated Instant Messaging and VoIP.","title":"Overview"},{"location":"layer_1/messaging/#resources_1","text":"Matrix Website Matrix GitHub","title":"Resources"},{"location":"layer_1/platforms/","text":"Low trust interaction platforms are a Layer 1 component. Example: * Polkadot Polkadot [[Polkadot|Polkadot]] is a heterogeneous multi\u2011chain technology. It consists of many parachains with potentially differing characteristics which can make it easier to achieve anonymity or formal verification. Transactions can be spread out across the chains, allowing many more to be processed in the same period of time. Polkadot ensures that each of these blockchains remains secure and that any dealings between them are faithfully executed. Specialised parachains called bridges can be created to link independent chains. For further information please see the section of this wiki devoted to the project: [[Polkadot|Polkadot]].","title":"Home"},{"location":"layer_1/platforms/#polkadot","text":"[[Polkadot|Polkadot]] is a heterogeneous multi\u2011chain technology. It consists of many parachains with potentially differing characteristics which can make it easier to achieve anonymity or formal verification. Transactions can be spread out across the chains, allowing many more to be processed in the same period of time. Polkadot ensures that each of these blockchains remains secure and that any dealings between them are faithfully executed. Specialised parachains called bridges can be created to link independent chains. For further information please see the section of this wiki devoted to the project: [[Polkadot|Polkadot]].","title":"Polkadot"},{"location":"layer_1/platforms/bridges/","text":"One of the central ideas in blockchain intercommunication is the role of bridges. Some of the exact details of how bridging will work in Polkadot has yet to be decided, so this page is a work in progress and will be updated as more details come out. There are likely three different types of bridging in Polkadot: Bridge contracts - Smart contracts deployed as bridges between Polkadot and external chains. Cross parachain communication - no contracts needed. In-built briding modules - Bridging to Polkadot from an external chain via a purpose built module. Bridge Contracts Those who are already familiar with Ethereum will probably already know of the Parity Bridge and the efforts being made to connect PoA sidechains to the Ethereum mainnet. The bridge is a combination of 2 smart contracts: one deployed on each chain that allows for cross-chain transfers of value. Ether deposited into the contract on the main net will provide a balance denominated in (say) ERC-20 tokens on the sidechain. While ERC-20 tokens deposited back into the contract on the sidechain can free up Ether on main net. In the case of Polkadot, it should be possible to have a bridge contract deployed on to (say) an EVM-based standalone chain and a contract deployed on a smart contract capable parachain. This wouldn't necessarily be the most efficient method of bridging, but given the generality of a Turing complete parachain it would be possible to bridge Polkadot and any other smart contract capable blockchain. Resources Parity Bridge POA Network Case study of POA Network's implementation of Parity's bridge chain solution. Cross parachain communication As mentioned on the [[Parachains|parachains]] page, parachains will be able to send messages (including transactions) to each other without the need for smart contracts to perform the bridging functionlity. Cross parachain messaging will be native to Polkadot. In-built bridging modules Receiving messages on a parachain from another blockchain will likely be done natively within a module of the client software. This would negate the need for for bridging contracts. The collator node functionality is intended for the exact purpose of transaction collation, including transactions which have originated outside of Polkadot. The bridging modules will likely be written with particular parachains in mind (e.g. Bitcoin, Ethereum), which means that any blockchain that's based on either of those should be able to be bridged directly to Polkadot without the need of going through a bridge contract on a parachain. This should allow for faster execution for those chains that are compatible. For the standalone chains that don't have an in-built module on Polkadot, it should be possible to deploy a bridge contract to a Turing complete parachain. Resources ChainX BTC Bridge - ChainX have implemented a BTC to Substrate bridge for their parachain","title":"Bridges"},{"location":"layer_1/platforms/bridges/#bridge-contracts","text":"Those who are already familiar with Ethereum will probably already know of the Parity Bridge and the efforts being made to connect PoA sidechains to the Ethereum mainnet. The bridge is a combination of 2 smart contracts: one deployed on each chain that allows for cross-chain transfers of value. Ether deposited into the contract on the main net will provide a balance denominated in (say) ERC-20 tokens on the sidechain. While ERC-20 tokens deposited back into the contract on the sidechain can free up Ether on main net. In the case of Polkadot, it should be possible to have a bridge contract deployed on to (say) an EVM-based standalone chain and a contract deployed on a smart contract capable parachain. This wouldn't necessarily be the most efficient method of bridging, but given the generality of a Turing complete parachain it would be possible to bridge Polkadot and any other smart contract capable blockchain.","title":"Bridge Contracts"},{"location":"layer_1/platforms/bridges/#resources","text":"Parity Bridge POA Network Case study of POA Network's implementation of Parity's bridge chain solution.","title":"Resources"},{"location":"layer_1/platforms/bridges/#cross-parachain-communication","text":"As mentioned on the [[Parachains|parachains]] page, parachains will be able to send messages (including transactions) to each other without the need for smart contracts to perform the bridging functionlity. Cross parachain messaging will be native to Polkadot.","title":"Cross parachain communication"},{"location":"layer_1/platforms/bridges/#in-built-bridging-modules","text":"Receiving messages on a parachain from another blockchain will likely be done natively within a module of the client software. This would negate the need for for bridging contracts. The collator node functionality is intended for the exact purpose of transaction collation, including transactions which have originated outside of Polkadot. The bridging modules will likely be written with particular parachains in mind (e.g. Bitcoin, Ethereum), which means that any blockchain that's based on either of those should be able to be bridged directly to Polkadot without the need of going through a bridge contract on a parachain. This should allow for faster execution for those chains that are compatible. For the standalone chains that don't have an in-built module on Polkadot, it should be possible to deploy a bridge contract to a Turing complete parachain.","title":"In-built bridging modules"},{"location":"layer_1/platforms/bridges/#resources_1","text":"ChainX BTC Bridge - ChainX have implemented a BTC to Substrate bridge for their parachain","title":"Resources"},{"location":"layer_1/platforms/polkadot/","text":"Overview Polkadot is a platform that allows diverse blockchains to transfer messages, including value, in a trust-free fashion; sharing their unique features while pooling their security. In brief, Polkadot is a scalable heterogeneous multi-chain technology. Polkadot is heterogeneous because it is entirely flexible and makes no assumption about the nature or structure of the chains in the network. Even non-blockchain systems or data structures can become parachains if they fulfill a set of criteria. Polkadot may be considered equivalent to a set of independent chains (e.g. a set containing Ethereum, Ethereum Classic, Namecoin and Bitcoin) except with important additions: pooled security and trust-free interchain transactability. Many of the native [[parachains|Parachains]] of Polkadot will be written using a [[Polkadot Runtime Environment|Polkadot Runtime Environment]] SDK (e.g. Parity Technologies' [[Substrate|Substrate]]). Polkadot Resources Community Riot - Discuss general Polkadot topics and contact Web3 Foundation and Parity Technologies team members. Reddit - Share content, tools, and updates. Twitter - Updates on the Polkadot platform and community. Technical chat - Listen to Core Devs discuss technical topics related to Polkadot. Beginner's Chat - Learn about Polkadot and how to interact with the testnet. Parity Substrate Chat - Discuss technical topics related to the Polkadot runtime environment. Governance Chat - Discuss governance topics related to Polkadot. Official Telegram - Discuss general Polkadot topics in this channel. Our main place is Riot, but this is for the folks who prefer Telegram. Unofficial Telegram - Discuss general Polkadot topics in this unofficial telegram channel. Unofficial Reddit - Unofficial Polkadot discussion. Read More Website - Overview of Polkadot, including FAQ, graphics and videos. Medium - Articles and guides on the development and technology. White Paper - General Polkadot description. Light Paper - Brief, non-technical overview of Polkadot. What is Substrate? - Explanation of the framework used to build Polkadot. GRANDPA Block Finality - Exploring consensus and finality in Polkadot. How Substrate relates to Polkadot - A Tale of Two Technologies Presentation Transcript Presentations Polkadot Substrate Overview - Dr. Gavin Wood presents Substrate (blockchain in-a-box + VM) and Polkadot, and builds a blockchain on-stage in 30 minutes using Substrate. Polkadot Overview - Dr. Gavin Wood presents an overview of Polkadot. Polkadot Overview - Dr. Jutta Steiner presents Polkadot. Substrate Intro - Dr. Gavin Wood presents Substrate, one of the technologies underlying Polkadot. Governance Demo - Dr. Gavin Wood presents the initial governance structure for Polkadot. Interoperability Intro - Rob Habermeier presents \"Interopability: Connecting the Dots.\" Podcasts Polkadot Overview - Dr. Gavin Wood chatted about the history of Polkadot and provided a great overview on Zero Knowledge podcast. Polkadot Overview - Epicenter interviews Peter Czaban of Web3 Foundation about Polkadot. Guides Polkadot UI - Get started on the testnet. Install PoC-2 - Install Polkadot's client and connect to the global PoC-2 testnet. Validating on POC-2 - Set-up a validator on the testnet. Substrate node - Install and run a Substrate node on BBQ-Birch testnet. Get testnet DOTS - Receive the native testnet token. Deploy a Parachain - Deploy a blockchain on the testnet. Style Guide - Contribute to the Rust implementation of Polkadot. Governance - Overview of governance system. Preparing to Build - Guide on how to prepare for Polkadot. Specifications Polkadot consensus - In progress documentation of the consensus mechanism. Polkadot Spec - Working yellow paper style Polkadot specification. Polkadot Wiki - Set of spec drafts, maintained by Parity Technologies. POC implementations Rust - Initial Polkadot implementation. Parity Substrate - Implementation of the Polkadot runtime environment. JS - Tools, utilities and client. POC-2 UI - Browser and apps. Telemetry - Information services website for nodes. Polkadash - Dashboard displaying validators and governance proposals. Polkascan - Real-time multi-chain data for Polkadot Relay Chain and Parity Substrate chains. Component implementations Parity Bridge - Bridge between any two ethereum-based networks. ParityDB - Fast and reliable database, optimised for read operations. wasmi - WebAssembly interpreter written in Rust. Parity WASM - WebAssembly serialization/deserialization in Rust. WASM utils - Collection of WASM utilities used in Parity and WASM contract devepment. Rust libp2p - The Rust Implementation of libp2p networking stack.","title":"Polkadot"},{"location":"layer_1/platforms/polkadot/#overview","text":"Polkadot is a platform that allows diverse blockchains to transfer messages, including value, in a trust-free fashion; sharing their unique features while pooling their security. In brief, Polkadot is a scalable heterogeneous multi-chain technology. Polkadot is heterogeneous because it is entirely flexible and makes no assumption about the nature or structure of the chains in the network. Even non-blockchain systems or data structures can become parachains if they fulfill a set of criteria. Polkadot may be considered equivalent to a set of independent chains (e.g. a set containing Ethereum, Ethereum Classic, Namecoin and Bitcoin) except with important additions: pooled security and trust-free interchain transactability. Many of the native [[parachains|Parachains]] of Polkadot will be written using a [[Polkadot Runtime Environment|Polkadot Runtime Environment]] SDK (e.g. Parity Technologies' [[Substrate|Substrate]]).","title":"Overview"},{"location":"layer_1/platforms/polkadot/#polkadot-resources","text":"","title":"Polkadot Resources"},{"location":"layer_1/platforms/polkadot/#community","text":"Riot - Discuss general Polkadot topics and contact Web3 Foundation and Parity Technologies team members. Reddit - Share content, tools, and updates. Twitter - Updates on the Polkadot platform and community. Technical chat - Listen to Core Devs discuss technical topics related to Polkadot. Beginner's Chat - Learn about Polkadot and how to interact with the testnet. Parity Substrate Chat - Discuss technical topics related to the Polkadot runtime environment. Governance Chat - Discuss governance topics related to Polkadot. Official Telegram - Discuss general Polkadot topics in this channel. Our main place is Riot, but this is for the folks who prefer Telegram. Unofficial Telegram - Discuss general Polkadot topics in this unofficial telegram channel. Unofficial Reddit - Unofficial Polkadot discussion.","title":"Community"},{"location":"layer_1/platforms/polkadot/#read-more","text":"Website - Overview of Polkadot, including FAQ, graphics and videos. Medium - Articles and guides on the development and technology. White Paper - General Polkadot description. Light Paper - Brief, non-technical overview of Polkadot. What is Substrate? - Explanation of the framework used to build Polkadot. GRANDPA Block Finality - Exploring consensus and finality in Polkadot. How Substrate relates to Polkadot - A Tale of Two Technologies Presentation Transcript","title":"Read More"},{"location":"layer_1/platforms/polkadot/#presentations","text":"Polkadot Substrate Overview - Dr. Gavin Wood presents Substrate (blockchain in-a-box + VM) and Polkadot, and builds a blockchain on-stage in 30 minutes using Substrate. Polkadot Overview - Dr. Gavin Wood presents an overview of Polkadot. Polkadot Overview - Dr. Jutta Steiner presents Polkadot. Substrate Intro - Dr. Gavin Wood presents Substrate, one of the technologies underlying Polkadot. Governance Demo - Dr. Gavin Wood presents the initial governance structure for Polkadot. Interoperability Intro - Rob Habermeier presents \"Interopability: Connecting the Dots.\"","title":"Presentations"},{"location":"layer_1/platforms/polkadot/#podcasts","text":"Polkadot Overview - Dr. Gavin Wood chatted about the history of Polkadot and provided a great overview on Zero Knowledge podcast. Polkadot Overview - Epicenter interviews Peter Czaban of Web3 Foundation about Polkadot.","title":"Podcasts"},{"location":"layer_1/platforms/polkadot/#guides","text":"Polkadot UI - Get started on the testnet. Install PoC-2 - Install Polkadot's client and connect to the global PoC-2 testnet. Validating on POC-2 - Set-up a validator on the testnet. Substrate node - Install and run a Substrate node on BBQ-Birch testnet. Get testnet DOTS - Receive the native testnet token. Deploy a Parachain - Deploy a blockchain on the testnet. Style Guide - Contribute to the Rust implementation of Polkadot. Governance - Overview of governance system. Preparing to Build - Guide on how to prepare for Polkadot.","title":"Guides"},{"location":"layer_1/platforms/polkadot/#specifications","text":"Polkadot consensus - In progress documentation of the consensus mechanism. Polkadot Spec - Working yellow paper style Polkadot specification. Polkadot Wiki - Set of spec drafts, maintained by Parity Technologies.","title":"Specifications"},{"location":"layer_1/platforms/polkadot/#poc-implementations","text":"Rust - Initial Polkadot implementation. Parity Substrate - Implementation of the Polkadot runtime environment. JS - Tools, utilities and client. POC-2 UI - Browser and apps. Telemetry - Information services website for nodes. Polkadash - Dashboard displaying validators and governance proposals. Polkascan - Real-time multi-chain data for Polkadot Relay Chain and Parity Substrate chains.","title":"POC implementations"},{"location":"layer_1/platforms/polkadot/#component-implementations","text":"Parity Bridge - Bridge between any two ethereum-based networks. ParityDB - Fast and reliable database, optimised for read operations. wasmi - WebAssembly interpreter written in Rust. Parity WASM - WebAssembly serialization/deserialization in Rust. WASM utils - Collection of WASM utilities used in Parity and WASM contract devepment. Rust libp2p - The Rust Implementation of libp2p networking stack.","title":"Component implementations"},{"location":"layer_1/protocols/","text":"Overview Low trust interaction protocols are a Layer 1 component. Examples: Ethereum Bitcoin Zcash [[Polkadot|Polkadot]] parachains * [[Substrate|Substrate]] blockchains Ethereum Overview Ethereum is a decentralized platform that runs smart contracts: applications that run exactly as programmed without any possibility of downtime, censorship, fraud or third-party interference. These apps run on a custom built blockchain, an enormously powerful shared global infrastructure that can move value around and represent the ownership of property. Resources Ethereum Website Ethereum GitHub Bitcoin Overview Bitcoin is an experimental digital currency that enables instant payments to anyone, anywhere in the world. Bitcoin uses peer-to-peer technology to operate with no central authority: managing transactions and issuing money are carried out collectively by the network. Bitcoin Core is the name of open source software which enables the use of this currency. Resources Bitcoin Whitepaper (PDF) Bitcoin GitHub Zcash Overview Zcash is the first open, permissionless cryptocurrency that can fully protect the privacy of transactions using zero-knowledge cryptography. Resources Z Cash Website Z Cash GitHub Z Cash Documentation Polkadot parachains Overview A parachain (parallelizable chain) is a simpler form of blockchain, which attaches to the security provided by the [[Polkadot|Polkadot]] Relay Chain rather than providing its own. The Relay Chain is called that because it not only lends security to attached parachains, but also provides a guarantee of secure message-passing between them. Resources Parachain Introduction Parachains - Building Introduction Substrate blockchains Overview Substrate is a product created by Parity Technologies and is Parity's implementation of a [[Polkadot Runtime Environment|Polkadot Runtime Environment]]. Substrate is a software development framework to build blockchain technologies. Substrate can be used to create standalone blockchains or to build (native) [[parachains|Parachains]]. For more information, see the dedicated [[Substrate|Substrate]] page on this wiki. Resources Substrate Developer Hub Substrate Repository \" What is Substrate? \" by Jack Fransham.","title":"Home"},{"location":"layer_1/protocols/#overview","text":"Low trust interaction protocols are a Layer 1 component. Examples: Ethereum Bitcoin Zcash [[Polkadot|Polkadot]] parachains * [[Substrate|Substrate]] blockchains","title":"Overview"},{"location":"layer_1/protocols/#ethereum","text":"","title":"Ethereum"},{"location":"layer_1/protocols/#overview_1","text":"Ethereum is a decentralized platform that runs smart contracts: applications that run exactly as programmed without any possibility of downtime, censorship, fraud or third-party interference. These apps run on a custom built blockchain, an enormously powerful shared global infrastructure that can move value around and represent the ownership of property.","title":"Overview"},{"location":"layer_1/protocols/#resources","text":"Ethereum Website Ethereum GitHub","title":"Resources"},{"location":"layer_1/protocols/#bitcoin","text":"","title":"Bitcoin"},{"location":"layer_1/protocols/#overview_2","text":"Bitcoin is an experimental digital currency that enables instant payments to anyone, anywhere in the world. Bitcoin uses peer-to-peer technology to operate with no central authority: managing transactions and issuing money are carried out collectively by the network. Bitcoin Core is the name of open source software which enables the use of this currency.","title":"Overview"},{"location":"layer_1/protocols/#resources_1","text":"Bitcoin Whitepaper (PDF) Bitcoin GitHub","title":"Resources"},{"location":"layer_1/protocols/#zcash","text":"","title":"Zcash"},{"location":"layer_1/protocols/#overview_3","text":"Zcash is the first open, permissionless cryptocurrency that can fully protect the privacy of transactions using zero-knowledge cryptography.","title":"Overview"},{"location":"layer_1/protocols/#resources_2","text":"Z Cash Website Z Cash GitHub Z Cash Documentation","title":"Resources"},{"location":"layer_1/protocols/#polkadot-parachains","text":"","title":"Polkadot parachains"},{"location":"layer_1/protocols/#overview_4","text":"A parachain (parallelizable chain) is a simpler form of blockchain, which attaches to the security provided by the [[Polkadot|Polkadot]] Relay Chain rather than providing its own. The Relay Chain is called that because it not only lends security to attached parachains, but also provides a guarantee of secure message-passing between them.","title":"Overview"},{"location":"layer_1/protocols/#resources_3","text":"Parachain Introduction Parachains - Building Introduction","title":"Resources"},{"location":"layer_1/protocols/#substrate-blockchains","text":"","title":"Substrate blockchains"},{"location":"layer_1/protocols/#overview_5","text":"Substrate is a product created by Parity Technologies and is Parity's implementation of a [[Polkadot Runtime Environment|Polkadot Runtime Environment]]. Substrate is a software development framework to build blockchain technologies. Substrate can be used to create standalone blockchains or to build (native) [[parachains|Parachains]]. For more information, see the dedicated [[Substrate|Substrate]] page on this wiki.","title":"Overview"},{"location":"layer_1/protocols/#resources_4","text":"Substrate Developer Hub Substrate Repository \" What is Substrate? \" by Jack Fransham.","title":"Resources"},{"location":"layer_1/protocols/substrate/","text":"Overview Substrate is a product created by Parity Technologies and is Parity's implementation of a [[Polkadot Runtime Environment|Polkadot Runtime Environment]]. Substrate is a software development framework to build blockchain technologies. Substrate can be used to create standalone blockchains or to build (native) [[parachains|Parachains]]. Out of the box, Substrate comes with the following parts consensus networking an efficient, deterministic, sandboxed WebAssembly runtime an optional runtime module library that helps you build your runtime at minimal cost Useful Links Code Substrate Repository Documentation Substrate Developer Hub Creating a custom Substrate chain Deploying a Substrate Node chain How to build a custom Substrate Module from scratch Blogs posts \" What is Substrate? \" by Jack Fransham. \" Substrate in a nutshell \" by Dmitriy Kashitsyn. \" Substrate testnet launched \" by Phil Lucsok. \" Launch a blockchain in minutes with Substrate \" by Phil Lucsok. Chat channel Technical community chat on Riot. Website Parity's product page on Substrate . Videos Gavin Wood presents Parity Substrate at EventHorizon18 . Slides: Substrate Overview . Robert Habermeier presents Parity Substrate at the Berlin Truebit Meetup . Gavin Wood demonstrates launching a blockchain on Parity Substrate at Web3 Summit . Slides: Substrate Demo . Gavin Wood and Sergei Shulepov give a workshop on Substrate at DotCon-0 . Blockchains using Substrate Today Polkadot - Polkadot Relaychain implementation. Shasper - Ethereum 2.0 beacon chain implementation. ChainX - cross-chain digital asset management platform. Edgeware - incentivised testnet for active governance.","title":"Substrate"},{"location":"layer_1/protocols/substrate/#overview","text":"Substrate is a product created by Parity Technologies and is Parity's implementation of a [[Polkadot Runtime Environment|Polkadot Runtime Environment]]. Substrate is a software development framework to build blockchain technologies. Substrate can be used to create standalone blockchains or to build (native) [[parachains|Parachains]].","title":"Overview"},{"location":"layer_1/protocols/substrate/#out-of-the-box-substrate-comes-with-the-following-parts","text":"consensus networking an efficient, deterministic, sandboxed WebAssembly runtime an optional runtime module library that helps you build your runtime at minimal cost","title":"Out of the box, Substrate comes with the following parts"},{"location":"layer_1/protocols/substrate/#useful-links","text":"","title":"Useful Links"},{"location":"layer_1/protocols/substrate/#code","text":"Substrate Repository","title":"Code"},{"location":"layer_1/protocols/substrate/#documentation","text":"Substrate Developer Hub Creating a custom Substrate chain Deploying a Substrate Node chain How to build a custom Substrate Module from scratch","title":"Documentation"},{"location":"layer_1/protocols/substrate/#blogs-posts","text":"\" What is Substrate? \" by Jack Fransham. \" Substrate in a nutshell \" by Dmitriy Kashitsyn. \" Substrate testnet launched \" by Phil Lucsok. \" Launch a blockchain in minutes with Substrate \" by Phil Lucsok.","title":"Blogs posts"},{"location":"layer_1/protocols/substrate/#chat-channel","text":"Technical community chat on Riot.","title":"Chat channel"},{"location":"layer_1/protocols/substrate/#website","text":"Parity's product page on Substrate .","title":"Website"},{"location":"layer_1/protocols/substrate/#videos","text":"Gavin Wood presents Parity Substrate at EventHorizon18 . Slides: Substrate Overview . Robert Habermeier presents Parity Substrate at the Berlin Truebit Meetup . Gavin Wood demonstrates launching a blockchain on Parity Substrate at Web3 Summit . Slides: Substrate Demo . Gavin Wood and Sergei Shulepov give a workshop on Substrate at DotCon-0 .","title":"Videos"},{"location":"layer_1/protocols/substrate/#blockchains-using-substrate-today","text":"Polkadot - Polkadot Relaychain implementation. Shasper - Ethereum 2.0 beacon chain implementation. ChainX - cross-chain digital asset management platform. Edgeware - incentivised testnet for active governance.","title":"Blockchains using Substrate Today"},{"location":"layer_2/","text":"Overview Layer 2 is an enhancement layer for the lower layers of the Web 3 tech stack. Included in this component are meta-protocols, or layer 2 protocols, that provide enhanced features such as scaling, compute and encrypted messaging. This layer is made up of one component. Components (7) Second layer protocols (7.1) [[State channels|State channels]] (7.2) [[Plasma protocols|Plasma protocols]] * (7.3) [[Encrypted storage|Encrypted storage]] - _NuCypher, Parity Secret Store_ (7.4) [[Storage incentivization|Storage incentivization]] (7.5) [[Heavy computation|Heavy computation]] (7.6) [[Distributed secret management|Distributed secret management]] Resources Scaling Summary Spreadsheet - comparison of many scaling solutions across 13 key factors.","title":"Layer 2"},{"location":"layer_2/#overview","text":"Layer 2 is an enhancement layer for the lower layers of the Web 3 tech stack. Included in this component are meta-protocols, or layer 2 protocols, that provide enhanced features such as scaling, compute and encrypted messaging. This layer is made up of one component.","title":"Overview"},{"location":"layer_2/#components","text":"(7) Second layer protocols (7.1) [[State channels|State channels]] (7.2) [[Plasma protocols|Plasma protocols]] * (7.3) [[Encrypted storage|Encrypted storage]] - _NuCypher, Parity Secret Store_ (7.4) [[Storage incentivization|Storage incentivization]] (7.5) [[Heavy computation|Heavy computation]] (7.6) [[Distributed secret management|Distributed secret management]]","title":"Components"},{"location":"layer_2/#resources","text":"Scaling Summary Spreadsheet - comparison of many scaling solutions across 13 key factors.","title":"Resources"},{"location":"layer_2/computation/","text":"Heavy computation protocols and applications provide users with reliable and cheap computation. Examples are: Golem TrueBit * Enigma Protocol Golem Overview Golem is a global, open source, decentralized supercomputer that anyone can access. It is made up of the combined power of users' machines, from PCs to entire data centers. Resources Golem Website Golem Whitepaper Golem Documentation TrueBit Overview TrueBit gives Ethereum smart contracts a computational boost. Don't let Ethereum's gas limit drag your imagination! A novel incentive structure guarantees fast, reliable, and affordable results without third-party trust. Resources TrueBit Website TrueBit Whitepaper","title":"Computation"},{"location":"layer_2/computation/#golem","text":"","title":"Golem"},{"location":"layer_2/computation/#overview","text":"Golem is a global, open source, decentralized supercomputer that anyone can access. It is made up of the combined power of users' machines, from PCs to entire data centers.","title":"Overview"},{"location":"layer_2/computation/#resources","text":"Golem Website Golem Whitepaper Golem Documentation","title":"Resources"},{"location":"layer_2/computation/#truebit","text":"","title":"TrueBit"},{"location":"layer_2/computation/#overview_1","text":"TrueBit gives Ethereum smart contracts a computational boost. Don't let Ethereum's gas limit drag your imagination! A novel incentive structure guarantees fast, reliable, and affordable results without third-party trust.","title":"Overview"},{"location":"layer_2/computation/#resources_1","text":"TrueBit Website TrueBit Whitepaper","title":"Resources"},{"location":"layer_2/oracles/","text":"An oracle, in the context of blockchains and smart contracts, is an agent that finds and verifies real-world occurrences and submits this information to a blockchain to be used by smart contracts. Examples are: - Oraclize.it - ChainLink Oraclize.it Overview Smart contracts live like in a walled garden, they cannot fetch external data on their own. Oraclize helps by acting as a data carrier, a reliable connection between Web APIs and your Dapp. Resources Oraclize.it Website Oraclize.it Documentation ChainLink Overview ChainLink is blockchain middleware that allows smart contracts to access key off-chain resources like data feeds, various web APIs, and traditional bank account payments. Resources ChainLink Website ChainLink Documentation ChainLink Whitepaper","title":"Oracles"},{"location":"layer_2/oracles/#oraclizeit","text":"","title":"Oraclize.it"},{"location":"layer_2/oracles/#overview","text":"Smart contracts live like in a walled garden, they cannot fetch external data on their own. Oraclize helps by acting as a data carrier, a reliable connection between Web APIs and your Dapp.","title":"Overview"},{"location":"layer_2/oracles/#resources","text":"Oraclize.it Website Oraclize.it Documentation","title":"Resources"},{"location":"layer_2/oracles/#chainlink","text":"","title":"ChainLink"},{"location":"layer_2/oracles/#overview_1","text":"ChainLink is blockchain middleware that allows smart contracts to access key off-chain resources like data feeds, various web APIs, and traditional bank account payments.","title":"Overview"},{"location":"layer_2/oracles/#resources_1","text":"ChainLink Website ChainLink Documentation ChainLink Whitepaper","title":"Resources"},{"location":"layer_2/plasma/","text":"Overview Plasma is a proposed framework for incentivized and enforced execution of smart contracts which is scalable to a significant amount of state updates per second (potentially billions) enabling the blockchain to be able to represent a significant amount of decentralized financial applications worldwide. Resources White paper - proposed framework for Plasma. Minimum Viable Plasma - specification for minimum viable plasma implementation. Video - overview of Plasma. Examples are: Loom Network OmiseGO Loom Network Overview Loom Network is a Layer 2 scaling solution for Ethereum that is live in production. It is a network of DPoS sidechains, which allows for highly-scalable games and user-facing DApps while still being backed by the security of Ethereum. Resources Plasma Cash Initial Release - gas-less transactions and sub-second confirmations on sidechains. Plasma Cash ERC721 Version - initial release of an ERC721 compatible Plasma Cash contract client. OmiseGO Overview The OMG network is a scaling solution for finance on Ethereum, enabling transparent, peer-to-peer transactions in real-time. The decentralized network facilitates self-sovereign financial services across geographies, asset classes and applications. Resources Plasma MVP - research implementation of Minimum Viable Plasma. Plasma w/o Confirmations - specification for Plasma without confirmations. Roadmap - interview with Plasma researcher David Knott.","title":"Plasma"},{"location":"layer_2/plasma/#overview","text":"Plasma is a proposed framework for incentivized and enforced execution of smart contracts which is scalable to a significant amount of state updates per second (potentially billions) enabling the blockchain to be able to represent a significant amount of decentralized financial applications worldwide.","title":"Overview"},{"location":"layer_2/plasma/#resources","text":"White paper - proposed framework for Plasma. Minimum Viable Plasma - specification for minimum viable plasma implementation. Video - overview of Plasma. Examples are: Loom Network OmiseGO","title":"Resources"},{"location":"layer_2/plasma/#loom-network","text":"","title":"Loom Network"},{"location":"layer_2/plasma/#overview_1","text":"Loom Network is a Layer 2 scaling solution for Ethereum that is live in production. It is a network of DPoS sidechains, which allows for highly-scalable games and user-facing DApps while still being backed by the security of Ethereum.","title":"Overview"},{"location":"layer_2/plasma/#resources_1","text":"Plasma Cash Initial Release - gas-less transactions and sub-second confirmations on sidechains. Plasma Cash ERC721 Version - initial release of an ERC721 compatible Plasma Cash contract client.","title":"Resources"},{"location":"layer_2/plasma/#omisego","text":"","title":"OmiseGO"},{"location":"layer_2/plasma/#overview_2","text":"The OMG network is a scaling solution for finance on Ethereum, enabling transparent, peer-to-peer transactions in real-time. The decentralized network facilitates self-sovereign financial services across geographies, asset classes and applications.","title":"Overview"},{"location":"layer_2/plasma/#resources_2","text":"Plasma MVP - research implementation of Minimum Viable Plasma. Plasma w/o Confirmations - specification for Plasma without confirmations. Roadmap - interview with Plasma researcher David Knott.","title":"Resources"},{"location":"layer_2/secret_management/","text":"Overview Distributed secret management encrypts information while distributing the keys to selected authorities who can access it. Examples are: * Parity Secret Store Parity Secret Store Overview Secret Store enables distributed key generation, distributed key storage and threshold retrieval according to blockchain permissions. Resources Wiki - documentation, glossary, and configuration.","title":"Secret management"},{"location":"layer_2/secret_management/#overview","text":"Distributed secret management encrypts information while distributing the keys to selected authorities who can access it. Examples are: * Parity Secret Store","title":"Overview"},{"location":"layer_2/secret_management/#parity-secret-store","text":"","title":"Parity Secret Store"},{"location":"layer_2/secret_management/#overview_1","text":"Secret Store enables distributed key generation, distributed key storage and threshold retrieval according to blockchain permissions.","title":"Overview"},{"location":"layer_2/secret_management/#resources","text":"Wiki - documentation, glossary, and configuration.","title":"Resources"},{"location":"layer_2/state_channels/","text":"Overview State channels are a technique for performing transactions and other state transitions in a second layer built on top of a blockchain. State channels make blockchains more efficient by moving many processes off-chain, while still retaining a blockchain\u2019s characteristic trustworthiness. Payment channels are a type of state channel that allows users to make \"off-chain payments\" to each other. The term \"state channels\" generalizes this approach beyond payments. Examples are: Counterfactual Raiden Network Lightning Network FunFair Counterfactual Overview Counterfactual is building a generalized framework for native state channels integration in Ethereum-based decentralized applications. Resources Counterfactual: Generalized State Channels - paper describing generalized state channels. Generalized State Channels on Ethereum - article describing state channels on Ethereum. Video - video presentation of generalized state channels. Raiden Network Overview The Raiden Network is an off-chain scaling solution, enabling near-instant, low-fee and scalable payments. It\u2019s complementary to the Ethereum blockchain and works with any ERC20 compatible token. It is Ethereum\u2019s version of Bitcoin\u2019s Lightning Network. Resources FAQ - overview of the Raiden Network. GitHub Documentation - API documentation, developer preview, tuturoials. GitHub Repo - codebase. Video - video clip explaining the Raiden Network. Lightning Network Overview Lightning is a decentralized network using smart contract functionality in the blockchain to enable instant payments across a network of participants. Resources Whitepaper - overview the Bitcoin Lightning Network: Scalable Off-Chain Instant Payments. Summary - brief overview of the Lightning Network. FunFair's Fate Channels Overview A Fate Channel is a State Channel opened for the duration of a gaming session, supporting custom gaming messages between the FunFair client and server. The only transactions on the blockchain occur at the beginning and end of the gaming session. Resources Whitepaper - overview of FunFair with section on Fate Channels. State Channels in Disguise - brief overview of Fate Channels.","title":"State channels"},{"location":"layer_2/state_channels/#overview","text":"State channels are a technique for performing transactions and other state transitions in a second layer built on top of a blockchain. State channels make blockchains more efficient by moving many processes off-chain, while still retaining a blockchain\u2019s characteristic trustworthiness. Payment channels are a type of state channel that allows users to make \"off-chain payments\" to each other. The term \"state channels\" generalizes this approach beyond payments. Examples are: Counterfactual Raiden Network Lightning Network FunFair","title":"Overview"},{"location":"layer_2/state_channels/#counterfactual","text":"","title":"Counterfactual"},{"location":"layer_2/state_channels/#overview_1","text":"Counterfactual is building a generalized framework for native state channels integration in Ethereum-based decentralized applications.","title":"Overview"},{"location":"layer_2/state_channels/#resources","text":"Counterfactual: Generalized State Channels - paper describing generalized state channels. Generalized State Channels on Ethereum - article describing state channels on Ethereum. Video - video presentation of generalized state channels.","title":"Resources"},{"location":"layer_2/state_channels/#raiden-network","text":"","title":"Raiden Network"},{"location":"layer_2/state_channels/#overview_2","text":"The Raiden Network is an off-chain scaling solution, enabling near-instant, low-fee and scalable payments. It\u2019s complementary to the Ethereum blockchain and works with any ERC20 compatible token. It is Ethereum\u2019s version of Bitcoin\u2019s Lightning Network.","title":"Overview"},{"location":"layer_2/state_channels/#resources_1","text":"FAQ - overview of the Raiden Network. GitHub Documentation - API documentation, developer preview, tuturoials. GitHub Repo - codebase. Video - video clip explaining the Raiden Network.","title":"Resources"},{"location":"layer_2/state_channels/#lightning-network","text":"","title":"Lightning Network"},{"location":"layer_2/state_channels/#overview_3","text":"Lightning is a decentralized network using smart contract functionality in the blockchain to enable instant payments across a network of participants.","title":"Overview"},{"location":"layer_2/state_channels/#resources_2","text":"Whitepaper - overview the Bitcoin Lightning Network: Scalable Off-Chain Instant Payments. Summary - brief overview of the Lightning Network.","title":"Resources"},{"location":"layer_2/state_channels/#funfairs-fate-channels","text":"","title":"FunFair's Fate Channels"},{"location":"layer_2/state_channels/#overview_4","text":"A Fate Channel is a State Channel opened for the duration of a gaming session, supporting custom gaming messages between the FunFair client and server. The only transactions on the blockchain occur at the beginning and end of the gaming session.","title":"Overview"},{"location":"layer_2/state_channels/#resources_3","text":"Whitepaper - overview of FunFair with section on Fate Channels. State Channels in Disguise - brief overview of Fate Channels.","title":"Resources"},{"location":"layer_2/storage/","text":"Overview Encrypted storage is the use of encryption/decryption of backed-up and archived data, both in transit and on storage media. Encrypted storage is a feature of storage security that is gaining favor among enterprises and storage networks. Examples are: * Enigma Protocol Enigma Protocol Overview Enigma is a permissionless peer-to-peer network that allows ( secret contracts ) with strong correctness and privacy guarantees. Resoureces Wiki - documentation, gloassary, and configuration. Docker - latest release to begin writing secret contracts.","title":"Storage"},{"location":"layer_2/storage/#overview","text":"Encrypted storage is the use of encryption/decryption of backed-up and archived data, both in transit and on storage media. Encrypted storage is a feature of storage security that is gaining favor among enterprises and storage networks. Examples are: * Enigma Protocol","title":"Overview"},{"location":"layer_2/storage/#enigma-protocol","text":"","title":"Enigma Protocol"},{"location":"layer_2/storage/#overview_1","text":"Enigma is a permissionless peer-to-peer network that allows ( secret contracts ) with strong correctness and privacy guarantees.","title":"Overview"},{"location":"layer_2/storage/#resoureces","text":"Wiki - documentation, gloassary, and configuration. Docker - latest release to begin writing secret contracts.","title":"Resoureces"},{"location":"layer_2/storage_incentivisation/","text":"Storage incentivization mechanisms sit on top of Data Distribution protocols to incentivize individuals and organizations to store data on their machines. These mechanisms can take the form of decentralized applications that often reward storage providers with a native token. Examples are: Filecoin Sia * Storj Filecoin Overview Filecoin is an open-source, public, cryptocurrency and digital payment system intended to be a blockchain-based digital storage and data retrieval method. Resources Filecoin Website Filecoin Whitepaper Sia Overview Sia is a decentralized storage platform secured by blockchain technology. The Sia Storage Platform leverages underutilized hard drive capacity around the world to create a data storage marketplace that is more reliable and lower cost than traditional cloud storage providers. Resources Sia Website Sia Whitepaper Sia Documentation Storj Overview Storj is a next-generation decentralized cloud storage network. By renting unused hard drive and bandwidth capacity around the globe, Storj is able to offer more affordable object storage without sacraficing on performance or reliability. Resources Storj Website Storj Whitepaper Storj Documentation","title":"Storage incentivisation"},{"location":"layer_2/storage_incentivisation/#filecoin","text":"","title":"Filecoin"},{"location":"layer_2/storage_incentivisation/#overview","text":"Filecoin is an open-source, public, cryptocurrency and digital payment system intended to be a blockchain-based digital storage and data retrieval method.","title":"Overview"},{"location":"layer_2/storage_incentivisation/#resources","text":"Filecoin Website Filecoin Whitepaper","title":"Resources"},{"location":"layer_2/storage_incentivisation/#sia","text":"","title":"Sia"},{"location":"layer_2/storage_incentivisation/#overview_1","text":"Sia is a decentralized storage platform secured by blockchain technology. The Sia Storage Platform leverages underutilized hard drive capacity around the world to create a data storage marketplace that is more reliable and lower cost than traditional cloud storage providers.","title":"Overview"},{"location":"layer_2/storage_incentivisation/#resources_1","text":"Sia Website Sia Whitepaper Sia Documentation","title":"Resources"},{"location":"layer_2/storage_incentivisation/#storj","text":"","title":"Storj"},{"location":"layer_2/storage_incentivisation/#overview_2","text":"Storj is a next-generation decentralized cloud storage network. By renting unused hard drive and bandwidth capacity around the globe, Storj is able to offer more affordable object storage without sacraficing on performance or reliability.","title":"Overview"},{"location":"layer_2/storage_incentivisation/#resources_2","text":"Storj Website Storj Whitepaper Storj Documentation","title":"Resources"},{"location":"layer_3/","text":"Overview Layer 3 is the layer of human-readable languages and code libraries that make development easier. This layer is made up of one component. Components [[Protocol-extensible developer APIs languages|Protocol extensible developer APIs and languages]] Web3.js ether.js oo7.js Solidity * Rust","title":"Layer 3"},{"location":"layer_3/#overview","text":"Layer 3 is the layer of human-readable languages and code libraries that make development easier. This layer is made up of one component.","title":"Overview"},{"location":"layer_3/#components","text":"[[Protocol-extensible developer APIs languages|Protocol extensible developer APIs and languages]] Web3.js ether.js oo7.js Solidity * Rust","title":"Components"},{"location":"layer_3/apis/","text":"Overview Protocol extensible developer APIs and languages is a Layer 3 component. Examples are: web3.js ether.js oo7.js Solidity * Rust web3.js Overview This is the Ethereum compatible JavaScript API which implements the Generic JSON RPC spec. It's available on npm as a node module, for bower and component as an embeddable js and as a meteor.js package. Resources web3.js GitHub web3.js Documentation ethers.js Overview Complete Ethereum wallet implementation and utilities in JavaScript. Resources ethers.js GitHub ethers.js Documentation oo7.js Overview A small library providing what might be termed as reactive expressions, Bonds (hence the name). Classes deriving from Bond are expected to determine when their value has changed and call trigger accordingly. Resources 007 GitHub Solidity Overview Solidity is a contract-oriented, high-level language for implementing smart contracts. It was influenced by C++, Python and JavaScript and is designed to target the Ethereum Virtual Machine (EVM). Solidity is statically typed, supports inheritance, libraries and complex user-defined types among other features. Resources Solidity GitHub Solidity Documentation Rust Overview Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety. Resources Rust Website Rust GitHub","title":"Apis"},{"location":"layer_3/apis/#overview","text":"Protocol extensible developer APIs and languages is a Layer 3 component. Examples are: web3.js ether.js oo7.js Solidity * Rust","title":"Overview"},{"location":"layer_3/apis/#web3js","text":"","title":"web3.js"},{"location":"layer_3/apis/#overview_1","text":"This is the Ethereum compatible JavaScript API which implements the Generic JSON RPC spec. It's available on npm as a node module, for bower and component as an embeddable js and as a meteor.js package.","title":"Overview"},{"location":"layer_3/apis/#resources","text":"web3.js GitHub web3.js Documentation","title":"Resources"},{"location":"layer_3/apis/#ethersjs","text":"","title":"ethers.js"},{"location":"layer_3/apis/#overview_2","text":"Complete Ethereum wallet implementation and utilities in JavaScript.","title":"Overview"},{"location":"layer_3/apis/#resources_1","text":"ethers.js GitHub ethers.js Documentation","title":"Resources"},{"location":"layer_3/apis/#oo7js","text":"","title":"oo7.js"},{"location":"layer_3/apis/#overview_3","text":"A small library providing what might be termed as reactive expressions, Bonds (hence the name). Classes deriving from Bond are expected to determine when their value has changed and call trigger accordingly.","title":"Overview"},{"location":"layer_3/apis/#resources_2","text":"007 GitHub","title":"Resources"},{"location":"layer_3/apis/#solidity","text":"","title":"Solidity"},{"location":"layer_3/apis/#overview_4","text":"Solidity is a contract-oriented, high-level language for implementing smart contracts. It was influenced by C++, Python and JavaScript and is designed to target the Ethereum Virtual Machine (EVM). Solidity is statically typed, supports inheritance, libraries and complex user-defined types among other features.","title":"Overview"},{"location":"layer_3/apis/#resources_3","text":"Solidity GitHub Solidity Documentation","title":"Resources"},{"location":"layer_3/apis/#rust","text":"","title":"Rust"},{"location":"layer_3/apis/#overview_5","text":"Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.","title":"Overview"},{"location":"layer_3/apis/#resources_4","text":"Rust Website Rust GitHub","title":"Resources"},{"location":"layer_4/","text":"Overview Layer 4 is the top layer of the Web 3 tech stack. This is the layer at which the user interacts most easily interacts with Web 3 technology. This layer is made up of one component. Components [[Protocol-extensible user-interface cradle (\"browser\")|Protocol extensible user interface cradle]] Status Metamask MyCrypto Parity","title":"Layer 4"},{"location":"layer_4/#overview","text":"Layer 4 is the top layer of the Web 3 tech stack. This is the layer at which the user interacts most easily interacts with Web 3 technology. This layer is made up of one component.","title":"Overview"},{"location":"layer_4/#components","text":"[[Protocol-extensible user-interface cradle (\"browser\")|Protocol extensible user interface cradle]] Status Metamask MyCrypto Parity","title":"Components"},{"location":"layer_4/interfaces/","text":"Overview Protocol-extensible user-interface cradle is a Layer 4 component. Examples are: Status Metamask MyCrypto Parity Status Overview With Status your mobile device becomes a light client node on the Ethereum Network, enabling you to access Ethereum\u2019s entire ecosystem from anywhere. Resources Status website Status wiki Metamask Overview MetaMask is a bridge that allows you to visit the distributed web of tomorrow in your browser today. It allows you to run Ethereum DApps right in your browser without running a full Ethereum node. MetaMask includes a secure identity vault, providing a user interface to manage your identities on different sites and sign blockchain transactions. Resources Metamask website MyCrypto Overview MyCrypto is a free, open-source, client-side interface. It allows you to interact directly with the Ethereum blockchain while remaining in full control of your keys your funds. Resources MyCrypto website MyEtherWallet Overview MyEtherWallet is a free, open-source, client-side interface. It allows you to interact directly with the Ethereum blockchain while remaining in full control of your keys your funds. Resources MyEtherWallet website Parity Overview Parity comes with an extensive, easy-to-use, in-built Ethereum Wallet and \u00d0app environment that can be accessed via your Web browser of choice. Resources Parity website Parity wiki Parity GitHub","title":"Interfaces"},{"location":"layer_4/interfaces/#overview","text":"Protocol-extensible user-interface cradle is a Layer 4 component. Examples are: Status Metamask MyCrypto Parity","title":"Overview"},{"location":"layer_4/interfaces/#status","text":"","title":"Status"},{"location":"layer_4/interfaces/#overview_1","text":"With Status your mobile device becomes a light client node on the Ethereum Network, enabling you to access Ethereum\u2019s entire ecosystem from anywhere.","title":"Overview"},{"location":"layer_4/interfaces/#resources","text":"Status website Status wiki","title":"Resources"},{"location":"layer_4/interfaces/#metamask","text":"","title":"Metamask"},{"location":"layer_4/interfaces/#overview_2","text":"MetaMask is a bridge that allows you to visit the distributed web of tomorrow in your browser today. It allows you to run Ethereum DApps right in your browser without running a full Ethereum node. MetaMask includes a secure identity vault, providing a user interface to manage your identities on different sites and sign blockchain transactions.","title":"Overview"},{"location":"layer_4/interfaces/#resources_1","text":"Metamask website","title":"Resources"},{"location":"layer_4/interfaces/#mycrypto","text":"","title":"MyCrypto"},{"location":"layer_4/interfaces/#overview_3","text":"MyCrypto is a free, open-source, client-side interface. It allows you to interact directly with the Ethereum blockchain while remaining in full control of your keys your funds.","title":"Overview"},{"location":"layer_4/interfaces/#resources_2","text":"MyCrypto website","title":"Resources"},{"location":"layer_4/interfaces/#myetherwallet","text":"","title":"MyEtherWallet"},{"location":"layer_4/interfaces/#overview_4","text":"MyEtherWallet is a free, open-source, client-side interface. It allows you to interact directly with the Ethereum blockchain while remaining in full control of your keys your funds.","title":"Overview"},{"location":"layer_4/interfaces/#resources_3","text":"MyEtherWallet website","title":"Resources"},{"location":"layer_4/interfaces/#parity","text":"","title":"Parity"},{"location":"layer_4/interfaces/#overview_5","text":"Parity comes with an extensive, easy-to-use, in-built Ethereum Wallet and \u00d0app environment that can be accessed via your Web browser of choice.","title":"Overview"},{"location":"layer_4/interfaces/#resources_4","text":"Parity website Parity wiki Parity GitHub","title":"Resources"}]}